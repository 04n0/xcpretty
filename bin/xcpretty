#!/usr/bin/env ruby
# frozen_string_literal: true

if RUBY_VERSION < '2.0.0'
  abort "error: XCPretty requires Ruby 2.0.0 or higher."
end

if $PROGRAM_NAME == __FILE__
  $LOAD_PATH.unshift File.expand_path('../lib', __dir__)
end
require 'xcpretty'
require 'optparse'

module XCPretty
  def self.exit_with_error(message)
    warn "[!] #{message}"
    exit 1
  end
end

printer_opts = {
  unicode: XCPretty::Term.unicode?,
  colorize: XCPretty::Term.color?,
  formatter: XCPretty::Simple
}

OptionParser.new do |opts|
  opts.banner = "Usage: xcodebuild [options] | xcpretty"
  opts.on('-t', '--test', 'Use RSpec style output') do
    printer_opts[:formatter] = XCPretty::RSpec
  end
  opts.on('-s', '--simple', 'Use simple output (default)') do
    printer_opts[:formatter] = XCPretty::Simple
  end
  opts.on('-k', '--knock', 'Use knock output') do
    printer_opts[:formatter] = XCPretty::Knock
  end
  opts.on('--tap', 'Use TAP output') do
    printer_opts[:formatter] = XCPretty::TestAnything
  end
  opts.on('-c', '--[no-]color', 'Use colorized output. Default is auto') do |value|
    printer_opts[:colorize] = value
  end
  opts.on('--[no-]utf', 'Use unicode characters in output. Default is auto.') do |value|
    printer_opts[:unicode] = value
  end
  opts.on_tail('-h', '--help', 'Show this message') { puts opts; exit }
  opts.on_tail("-v", "--version", "Show version") { puts XCPretty::VERSION; exit }
  opts.parse!

  if STDIN.tty?
    XCPretty.exit_with_error(opts.help)
  end
end

printer = XCPretty::Printer.new(printer_opts)

STDIN.each_line do |line|
  printer.pretty_print(line)
end

printer.finish
